{"version":3,"sources":["index.js"],"names":["EditableContext","React","createContext","EditableRow","index","props","Form","useForm","form","component","Provider","value","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","useState","editing","setEditing","inputRef","useRef","useContext","useEffect","current","focus","toggleEdit","setFieldsValue","save","a","validateFields","values","console","log","childNode","Item","style","margin","name","rules","required","message","ref","onPressEnter","onBlur","className","paddingRight","onClick","EditableTable","require","handleDelete","key","dataSource","state","setState","filter","item","handleAdd","count","newData","uno","age","address","row","findIndex","splice","columns","width","render","_","length","onConfirm","type","action","labels","this","components","body","cell","map","col","onCell","marginBottom","rowClassName","bordered","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a5581b44.chunk.js","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { Table, Input, Button, Popconfirm, Form } from \"antd\";\nconst EditableContext = React.createContext(null);\n\nconst EditableRow = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      console.log(\"Save failed:\", errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{\n          margin: 0\n        }}\n        name={dataIndex}\n        rules={[\n          {\n            required: true,\n            message: `${title} is required.`\n          }\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{\n          paddingRight: 24\n        }}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  return <td {...restProps}>{childNode}</td>;\n};\nconst axios = require(\"axios\");\nconst loadData = async () => {\n  try {\n    const res = await axios.get(\"http://ittps.ru:8443/\");\n    const { data } = res;\n    console.log(res.data);\n    return { devices };\n  } catch (error) {\n    return { error };\n  }\n};\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = [\n      {\n        title: \"name\",\n        dataIndex: \"name\",\n        width: \"30%\",\n        editable: true\n      },\n      {\n        title: \"age\",\n        dataIndex: \"age\"\n      },\n      {\n        title: \"address\",\n        dataIndex: \"address\"\n      },\n      {\n        title: \"operation\",\n        dataIndex: \"operation\",\n        render: (_, record) =>\n          this.state.dataSource.length >= 1 ? (\n            <Popconfirm\n              title=\"Sure to delete?\"\n              onConfirm={() => this.handleDelete(record.key)}\n            >\n              <a>Delete</a>\n            </Popconfirm>\n          ) : null\n      }\n    ];\n    this.state = {\n      dataSource: [\n        {\n          key: \"0\",\n          type: \"ip\",\n          name: \"188.134.65.67\",\n          age: \"32\",\n          rules: {\n            action: \"\"\n          },\n          address: \"\",\n          labels: [\"ip\"]\n        },\n        {\n          key: \"1\",\n          name: \"Edward King 1\",\n          age: \"32\",\n          address: \"London, Park Lane no. 1\"\n        }\n      ],\n      count: 2\n    };\n  }\n\n  handleDelete = (key) => {\n    const dataSource = [...this.state.dataSource];\n    this.setState({\n      dataSource: dataSource.filter((item) => item.key !== key)\n    });\n  };\n  handleAdd = () => {\n    const { count, dataSource } = this.state;\n    const newData = {\n      key: count,\n      uno: ``,\n      name: ``,\n      age: \"\",\n      address: ``\n    };\n\n    this.setState({\n      dataSource: [...dataSource, newData],\n      count: count + 1\n    });\n  };\n  handleSave = (row) => {\n    const newData = [...this.state.dataSource];\n    const index = newData.findIndex((item) => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, { ...item, ...row });\n    this.setState({\n      dataSource: newData\n    });\n  };\n\n  render() {\n    const { dataSource } = this.state;\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map((col) => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return {\n        ...col,\n        onCell: (record) => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      };\n    });\n    return (\n      <div>\n        <Button\n          onClick={this.handleAdd}\n          type=\"primary\"\n          style={{\n            marginBottom: 16\n          }}\n        >\n          Add a row\n        </Button>\n        <Table\n          components={components}\n          rowClassName={() => \"editable-row\"}\n          bordered\n          dataSource={dataSource}\n          columns={columns}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<EditableTable />, document.getElementById(\"container\"));\n"],"sourceRoot":""}